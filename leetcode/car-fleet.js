/*

    На однополосной дороге n машин едут к одной и той же цели. Цель находится в target милях.
Вам даны два целочисленных массива position и speed, оба длины n, где position[i] - это позиция i-й машины, а speed[i] - это скорость i-й машины (в милях в час).
Машина никогда не может обогнать другую машину впереди нее, но может догнать ее и ехать бампер к бамперу на той же скорости. 
Более быстрая машина замедлится, чтобы соответствовать скорости более медленной машины. 
Расстояние между этими двумя машинами игнорируется (предполагается, что они находятся в одной позиции).

Автоколонна - это некоторый непустой набор машин, едущих на одной и той же позиции и с одной и той же скоростью.
Заметьте, что одна машина также считается автоколонной.
Если машина догоняет автоколонну прямо в точке назначения, она все равно считается частью этой автоколонны.
Верните количество автоколонн, которые прибудут к месту назначения.

Пример 1:

Ввод: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Вывод: 3
Объяснение:
Машины, начинающие в 10 (скорость 2) и 8 (скорость 4), образуют автоколонну, встречаясь друг с другом в 12.
Машина, начинающая в 0, не догоняет никакую другую машину, поэтому она образует автоколонну сама по себе.
Машины, начинающие в 5 (скорость 1) и 3 (скорость 3), образуют автоколонну, встречаясь друг с другом в 6. 
Автоколонна движется со скоростью 1, пока не достигнет цели.
Заметьте, что никакие другие машины не встречают эти автоколонны до точки назначения, поэтому ответ - 3.

Пример 2:
Ввод: target = 10, position = [3], speed = [3]
Вывод: 1
Объяснение: Есть только одна машина, следовательно, только одна автоколонна.


Пример 3:
Ввод: target = 100, position = [0,2,4], speed = [4,2,1]
Вывод: 1
Объяснение:
Машины, начинающие в 0 (скорость 4) и 2 (скорость 2), образуют автоколонну, встречаясь друг с другом в 4. Автоколонна движется со скоростью 2.
Затем эта автоколонна (скорость 2) и машина, начинающая в 4 (скорость 1), образуют одну автоколонну, встречаясь друг с другом в 6. 
Автоколонна движется со скоростью 1, пока не достигнет цели.
*/

// var carFleet = function (target, position, speed) {
//   if (position.length === 1) {
//     return 1;
//   }

//   const map = new Map();

//   for (let index = 0; index < position.length; index++) {
//     const currentCar = index;
//     const currentSpeed = position[index];
//     const currentPosition = speed[index];

//     const meetingPoint = (target - currentPosition) * currentSpeed;
//     const point = meetingPoint <= target ? meetingPoint : currentPosition;

//     if (map.has(point)) {
//       const pointVal = map.get(point).push(index);

//       map.set(point, pointVal);
//     } else {
//       map.set(point, []);
//     }
//   }

//   return map.size;
// };

var carFleet = function (target, position, speed) {
  const n = position.length;
  const inds = []; // 0 1 2 3 4 5 6
  for (let i = 0; i < n; i++) inds.push(i);

  inds.sort((a, b) => position[b] - position[a]); //

  console.log(inds);
  let cur = inds[0];
  let result = 1;

  for (let i = 1; i < n; i++) {
    let idx = inds[i];
    if (
      (target - position[idx]) * speed[cur] >
      (target - position[cur]) * speed[idx]
    ) {
      result++;
      cur = idx;
    }
  }

  return result;
};

console.log(carFleet(12, [10, 8, 0, 5, 3], [2, 4, 1, 1, 3]));
// console.log(carFleet(12, [0, 2, 4], [4, 2, 1]));
